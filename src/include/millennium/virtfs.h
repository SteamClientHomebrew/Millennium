/**
 * Auto-generated by Millennium during CMake configuration - do not edit manually :)
 */
#define INCBIN_PREFIX
#include "incbin.h"
/** Millennium frontend library -- responsible for displaying Millennium UI, and loading themes */
INCTXT(MILLENNIUM_FRONTEND_BIN_, "../../../assets/.millennium/Dist/index.js");

/** Millennium API library */
INCTXT(MILLENNIUM_API_BIN_, "../../../sdk/typescript-packages/loader/build/millennium.js");
INCTXT(MILLENNIUM_API_BIN_MAP_, "../../../sdk/typescript-packages/loader/build/millennium.js.map");
/** Millennium API chunk files */
INCTXT(MILLENNIUM_CHUNK_BROWSER_INIT_BIN_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-browser-init.js");
INCTXT(MILLENNIUM_CHUNK_BROWSER_INIT_MAP_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-browser-init.js.map");
INCTXT(MILLENNIUM_CHUNK_INDEX_BIN_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-index.js");
INCTXT(MILLENNIUM_CHUNK_INDEX_MAP_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-index.js.map");
INCTXT(MILLENNIUM_CHUNK_LOGGER_BIN_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-logger.js");
INCTXT(MILLENNIUM_CHUNK_LOGGER_MAP_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-logger.js.map");
INCTXT(MILLENNIUM_CHUNK_MILLENNIUM_API_BIN_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-millennium-api.js");
INCTXT(MILLENNIUM_CHUNK_MILLENNIUM_API_MAP_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-millennium-api.js.map");
INCTXT(MILLENNIUM_CHUNK_WEBPACK_BIN_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-webpack.js");
INCTXT(MILLENNIUM_CHUNK_WEBPACK_MAP_, "../../../sdk/typescript-packages/loader/build/chunks/chunk-webpack.js.map");

// clang-format off
std::unordered_map<std::string, std::string> INTERNAL_FTP_CALL_DATA = {
	{ fmt::format("https://millennium.ftp/{}/millennium-frontend.js", GetScrambledApiPathToken()), std::string(MILLENNIUM_FRONTEND_BIN_Data) },
	{ fmt::format("https://millennium.ftp/{}/millennium.js", GetScrambledApiPathToken()), std::string(MILLENNIUM_API_BIN_Data) },
	{ fmt::format("https://millennium.ftp/{}/millennium.js.map", GetScrambledApiPathToken()), std::string(MILLENNIUM_API_BIN_MAP_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-browser-init.js", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_BROWSER_INIT_BIN_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-browser-init.js.map", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_BROWSER_INIT_MAP_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-index.js", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_INDEX_BIN_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-index.js.map", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_INDEX_MAP_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-logger.js", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_LOGGER_BIN_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-logger.js.map", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_LOGGER_MAP_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-millennium-api.js", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_MILLENNIUM_API_BIN_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-millennium-api.js.map", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_MILLENNIUM_API_MAP_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-webpack.js", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_WEBPACK_BIN_Data) },
	{ fmt::format("https://millennium.ftp/{}/chunks/chunk-webpack.js.map", GetScrambledApiPathToken()), std::string(MILLENNIUM_CHUNK_WEBPACK_MAP_Data) }
};
// clang-format on
