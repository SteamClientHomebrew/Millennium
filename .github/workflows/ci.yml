name: Build Millennium

on:
    workflow_dispatch:
        inputs:
            release_artifacts:
                description: 'Release build?'
                required: true
                default: 'no'

concurrency:
    group: ci-build
    cancel-in-progress: true

jobs:
    build-windows:
        permissions:
            contents: write
            issues: write
            pull-requests: write

        runs-on: windows-latest

        steps:
            - name: ‚öôÔ∏è Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: true

            - name: ‚öôÔ∏è Download Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: ‚öôÔ∏è Download Semantic Release
              run: |
                  npm install -g pnpm
                  npm install --save-dev semantic-release @semantic-release/github @semantic-release/exec @semantic-release/changelog @semantic-release/git
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: ‚öôÔ∏è Get Next Version
              id: get_version
              run: . scripts\ci\win32\version.ps1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: ‚öôÔ∏è Download Python Dependencies
              run: |
                  Invoke-WebRequest -Uri "https://github.com/SteamClientHomebrew/PythonBuildAgent/releases/download/v1.0.9/python-windows.zip" -OutFile "python-windows.zip"
                  Expand-Archive -Path "python-windows.zip" -DestinationPath "./Python-3.11.8" -Force
                  New-Item -ItemType Directory -Force -Path "./build/python"

                  Copy-Item ./Python-3.11.8/artifacts/windows/python311.dll ./build/python/python311.dll
                  Copy-Item ./Python-3.11.8/artifacts/windows/python311_d.dll ./build/python/python311_d.dll
                  Copy-Item ./Python-3.11.8/artifacts/windows/python311.lib ./build/python/python311.lib
                  Copy-Item ./Python-3.11.8/artifacts/windows/python311_d.lib ./build/python/python311_d.lib

            - name: ‚öôÔ∏è Download Msys2
              uses: msys2/setup-msys2@v2
              with:
                  msystem: mingw32
                  install: mingw-w64-i686-libgcrypt mingw-w64-i686-gcc mingw-w64-i686-cmake mingw-w64-i686-ninja unzip

            - name: ‚öôÔ∏è Install VCPKG
              shell: pwsh
              run: ./vendor/vcpkg/bootstrap-vcpkg.bat && ./vendor/vcpkg/vcpkg integrate install

            - name: üõ†Ô∏è Build Millennium Frontend
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  cd sdk && pnpm install && pnpm run build && cd ..
                  New-Item -ItemType Directory -Force -Path "D:/a/env/ext/data/shims"
                  Copy-Item -Recurse -Force ./sdk/typescript-packages/loader/build/* D:/a/env/ext/data/shims/

                  cd assets && pnpm install && pnpm run build && cd ..
                  . scripts\ci\win32\mk-assets.ps1

            - name: üõ†Ô∏è Build Millennium Plugin Backend
              run: . scripts\ci\win32\setup-python.ps1 D:/a/env/ext/data/cache

            - name: üõ†Ô∏è Build Millennium Backend
              shell: msys2 {0}
              run: |
                  cmake --preset=windows-mingw-release -DGITHUB_ACTION_BUILD=ON
                  mkdir ./build/artifacts
                  cmake --build build --config Release -- -j$(nproc)
                  cp ./build/python/python311.dll D:/a/env/python311.dll
                  cp ./build/preload/user32.dll  D:/a/env/user32.dll
                  cp ./build/millennium.dll D:/a/env/millennium.dll
                  mkdir D:/a/env/ext/bin

            - name: üì§ Upload Build Artifact
              id: upload-unsigned-artifact
              uses: actions/upload-artifact@v4
              with:
                  include-hidden-files: true
                  name: millennium-windows
                  path: D:/a/env/

            - id: sign_artifact
              uses: signpath/github-action-submit-signing-request@v1.1
              with:
                  api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
                  organization-id: 'f90532fc-e58c-4863-bc0d-72623720335f'
                  project-slug: 'Millennium'
                  signing-policy-slug: 'release-signing'
                  artifact-configuration-slug: 'millennium-release-config'
                  github-artifact-id: '${{ steps.upload-unsigned-artifact.outputs.artifact-id }}'
                  output-artifact-directory: 'signed-millennium'
                  wait-for-completion: true
                  parameters: |
                      version: ${{ toJson(steps.get_version.outputs.version) }}

            - name: üì§ Upload Signed Build Release
              id: upload-signed-artifact
              uses: actions/upload-artifact@v4
              with:
                  include-hidden-files: true
                  name: millennium-windows-signed
                  path: D:\a\Millennium\Millennium\signed-millennium

    build-linux:
        permissions:
            contents: write
            issues: write
            pull-requests: write

        runs-on: ubuntu-latest

        steps:
            - name: ‚öôÔ∏è Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: true

            - name: ‚öôÔ∏è Download Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: ‚öôÔ∏è Download Semantic Release
              run: |
                  npm install -g pnpm
                  pnpm install --save-dev semantic-release @semantic-release/github @semantic-release/exec @semantic-release/changelog @semantic-release/git
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: ‚öôÔ∏è Get Next Version
              run: bash scripts/ci/posix/version.sh
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: ‚öôÔ∏è Install GCC Dependencies
              run: |
                  sudo dpkg --add-architecture i386
                  sudo apt-get update
                  sudo apt-get install -y build-essential gcc-multilib g++-multilib

            - name: ‚öôÔ∏è Download Python Dependencies
              run: |
                  wget https://github.com/shdwmtr/pybuilder/releases/download/v1.0.6/python-3.11.8-32-bit.tar.gz -O python-3.11.8-32-bit.tar.gz
                  mkdir -p ~/build/opt/python-i686-3.11.8
                  mkdir -p ~/build/usr/lib/millennium
                  mkdir -p /opt/python-i686-3.11.8/lib

                  tar -xzf python-3.11.8-32-bit.tar.gz -C ~/build/opt/python-i686-3.11.8
                  mv ~/build/opt/python-i686-3.11.8/python-build/* ~/build/opt/python-i686-3.11.8/

                  cp ~/build/opt/python-i686-3.11.8/lib/libpython-3.11.8.so /opt/python-i686-3.11.8/lib/libpython-3.11.8.so
                  ~/build/opt/python-i686-3.11.8/bin/python3.11 --version

            - name: ‚öôÔ∏è Install CMake
              uses: jwlawson/actions-setup-cmake@v2
              with:
                  cmake-version: '3.21.1'

            - name: ‚öôÔ∏è Install VCPKG
              run: sudo apt install libgtk-3-dev ninja-build && ./vendor/vcpkg/bootstrap-vcpkg.sh && ./vendor/vcpkg/vcpkg integrate install

            - name: üõ†Ô∏è Build Millennium Frontend
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  cd sdk && pnpm install && pnpm run build && cd ..
                  cd assets && pnpm install && npm run build && cd ..
                  bash scripts/ci/posix/mk-assets.sh

                  mkdir -p ~/build/usr/share/millennium/shims
                  cp -r ./sdk/typescript-packages/loader/build/* ~/build/usr/share/millennium/shims/

            - name: üõ†Ô∏è Build Millennium Backend
              run: |
                  cmake --preset=linux-release -G "Ninja" -DGITHUB_ACTION_BUILD=ON
                  # Build the project
                  cmake --build build --config Release -- -j$(nproc)

                  # Create final directory structure
                  mkdir -p ~/build/usr/lib/millennium
                  mkdir -p ~/build/usr/bin
                  mkdir -p ~/build/usr/share/millennium
                  mkdir -p ~/build/opt

                  # Copy binaries and libraries directly to final locations
                  cp ./build/libmillennium_x86.so ~/build/usr/lib/millennium/libmillennium_x86.so
                  cp ./build/unix-hooks/libmillennium_bootstrap_86x.so ~/build/usr/lib/millennium/libmillennium_bootstrap_86x.so
                  cp ./build/cli/millennium ~/build/usr/bin/millennium
                  chmod +x ~/build/usr/bin/millennium

                  # Copy additional assets
                  cp -r ~/env/ext/data/assets ~/build/usr/share/millennium/assets

            - name: üì§ Upload Build Artifact
              uses: actions/upload-artifact@v4
              with:
                  include-hidden-files: true
                  name: millennium-linux
                  path: ~/build/

    release:
        needs: [build-windows, build-linux]
        runs-on: ubuntu-latest
        if: ${{ inputs.release_artifacts == 'yes' }}
        steps:
            - name: ‚öôÔ∏è Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: true

            - name: ‚öôÔ∏è Download Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - name: ‚öôÔ∏è Install Semantic Release
              run: npm install --save-dev semantic-release @semantic-release/github @semantic-release/exec @semantic-release/changelog @semantic-release/git
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: ‚öôÔ∏è Download Windows Build
              uses: actions/download-artifact@v4
              with:
                  name: millennium-windows-signed
                  path: ./artifacts/windows

            - name: ‚öôÔ∏è Download Linux Build
              uses: actions/download-artifact@v4
              with:
                  name: millennium-linux
                  path: ./artifacts/linux

            - name: ‚öôÔ∏è Bump Millennium Version
              id: read_version
              run: bash scripts/ci/posix/bump.sh
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: üõ†Ô∏è Release Millennium
              run: |
                  mkdir -p ./artifacts/release
                  cd ./artifacts/windows && zip -r ../release/millennium-v${{ steps.read_version.outputs.version }}-windows-x86_64.zip . && cd ../..
                  tar -czvf ./artifacts/release/millennium-v${{ steps.read_version.outputs.version }}-linux-x86_64.tar.gz -C ./artifacts/linux .
                  npx semantic-release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
