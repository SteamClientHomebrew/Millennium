name: Build Millennium

on:
  workflow_dispatch:
    inputs:
      release_artifacts:
        description: "Release build?"
        required: true
        default: "no"

concurrency:
  group: ci-build
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: ‚öôÔ∏è Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: ‚öôÔ∏è Download Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: ‚öôÔ∏è Download Semantic Release
        run: |
          npm install -g pnpm
          pnpm install --save-dev semantic-release @semantic-release/github @semantic-release/exec @semantic-release/changelog @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Get Next Version
        id: get_version
        run: |
          cd scripts && npx semantic-release --dry-run --no-ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: prepare
    permissions:
      contents: write
      issues: write
      pull-requests: write

    runs-on: windows-latest

    steps:
      - name: ‚öôÔ∏è Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: ‚öôÔ∏è Update Millennium Version
        run: |
          echo "# current version of millennium" > ./version
          echo "v${{ needs.prepare.outputs.version }}" >> ./version

      - name: ‚öôÔ∏è Download Python Dependencies
        run: |
          Invoke-WebRequest -Uri "https://github.com/SteamClientHomebrew/PythonBuildAgent/releases/download/v1.0.9/python-windows.zip" -OutFile "python-windows.zip"
          Expand-Archive -Path "python-windows.zip" -DestinationPath "./Python-3.11.8" -Force
          New-Item -ItemType Directory -Force -Path "./build/python"

          Copy-Item ./Python-3.11.8/artifacts/windows/python311.dll ./build/python/python311.dll
          Copy-Item ./Python-3.11.8/artifacts/windows/python311_d.dll ./build/python/python311_d.dll
          Copy-Item ./Python-3.11.8/artifacts/windows/python311.lib ./build/python/python311.lib
          Copy-Item ./Python-3.11.8/artifacts/windows/python311_d.lib ./build/python/python311_d.lib

      - name: ‚öôÔ∏è Download Msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw32
          install: mingw-w64-i686-libgcrypt mingw-w64-i686-gcc mingw-w64-i686-cmake mingw-w64-i686-ninja mingw-w64-i686-make unzip git

      - name: üõ†Ô∏è Build Millennium Plugin Backend
        run: |
          $pythonUrl = "https://www.python.org/ftp/python/3.11.8/python-3.11.8-embed-win32.zip"
          $getPipUrl = "https://bootstrap.pypa.io/get-pip.py"
          $destinationFolder = "D:/a/env/ext/data/cache"

          if (-Not (Test-Path $destinationFolder)) {
              New-Item -ItemType Directory -Path $destinationFolder
          }

          $zipFilePath = Join-Path $destinationFolder "python-3.11.8-embed-win32.zip"
          $getPipFilePath = Join-Path $destinationFolder "get-pip.py"

          function Download-File($Url, $DestinationPath) {
              $webRequest = [System.Net.HttpWebRequest]::Create($Url)
              $webRequest.Method = "GET"
              $webRequest.UserAgent = "Millennium.Installer/1.0"

              $response = $webRequest.GetResponse()
              $responseStream = $response.GetResponseStream()

              $fileStream = New-Object System.IO.FileStream($DestinationPath, [System.IO.FileMode]::Create, [System.IO.FileAccess]::Write, [System.IO.FileShare]::None)
              $buffer = New-Object byte[] 8192
              $bytesRead = 0

              while (($bytesRead = $responseStream.Read($buffer, 0, $buffer.Length)) -gt 0) {
                  $fileStream.Write($buffer, 0, $bytesRead)
              }

              $fileStream.Close()
              $responseStream.Close()
          }

          function Extract-ZipFile {
              param (
                  [string]$zipPath,
                  [string]$extractPath
              )

              Add-Type -AssemblyName System.IO.Compression.FileSystem
              $zipArchive = [System.IO.Compression.ZipFile]::OpenRead($zipPath)
              foreach ($entry in $zipArchive.Entries) {
                  $destinationPath = Join-Path $extractPath $entry.FullName
                  $destinationDir = [System.IO.Path]::GetDirectoryName($destinationPath)
                  
                  if (-Not (Test-Path $destinationDir)) {
                      New-Item -ItemType Directory -Path $destinationDir | Out-Null
                  }

                  if ($entry.Name -ne "") {
                      if (Test-Path $destinationPath) {
                          Remove-Item $destinationPath -Force
                      }
                      $fileStream = [System.IO.File]::Create($destinationPath)
                      $entryStream = $entry.Open()
                      $buffer = New-Object byte[] 8192
                      $bytesRead = 0

                      while (($bytesRead = $entryStream.Read($buffer, 0, $buffer.Length)) -gt 0) {
                          $fileStream.Write($buffer, 0, $bytesRead)
                      }

                      $fileStream.Close()
                      $entryStream.Close()
                  }
              }
              $zipArchive.Dispose()
          }

          Download-File -Url $pythonUrl -DestinationPath $zipFilePath
          Extract-ZipFile -zipPath $zipFilePath -extractPath $destinationFolder
          Remove-Item $zipFilePath

          Write-Host "Downloaded python packages to $destinationFolder"

          Set-Content -Path (Join-Path $destinationFolder "python311._pth") -Value @'
          python311.zip
          .
          # The following line has been added by Millennium
          # This will implicitly run site.main() which lets us pip from 'python -m pip'
          import site
          '@

          Write-Host "Enabled external site package support."

          # Download get-pip.py
          Download-File -Url $getPipUrl -DestinationPath $getPipFilePath

          # Run get-pip.py to install pip
          $pythonExe = Join-Path $destinationFolder "python.exe"
          & $pythonExe $getPipFilePath --no-warn-script-location

          Remove-Item $getPipFilePath
          Write-Host "Installed pip on embedded packages"

      - name: üõ†Ô∏è Build Millennium Backend
        shell: msys2 {0}
        run: |
          wget -qO- https://get.pnpm.io/install.sh | ENV="$HOME/.bashrc" SHELL="$(which bash)" bash -

          cmake --preset=windows-mingw-release -DGITHUB_ACTION_BUILD=ON
          mkdir ./build/artifacts
          cmake --build build --config Release -- -j$(nproc)

          cp ./build/python/python311.dll D:/a/env/python311.dll
          cp ./build/src/boot/win32/version.dll  D:/a/env/version.dll
          cp ./build/millennium.dll D:/a/env/millennium.dll

          find assets -mindepth 1 -maxdepth 1 \( -name '.millennium' -o -name 'pipx' \) -exec mv -t D:/a/env/ext/data/assets {} +

      - name: üì§ Upload Unsigned Build Artifact
        id: upload-unsigned-artifact
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: unsigned-millennium-windows
          path: D:/a/env/

      - name: üõ†Ô∏è Sign Millennium Build
        id: sign_artifact
        if: ${{ inputs.release_artifacts == 'yes' }}
        uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: "${{ secrets.SIGNPATH_API_TOKEN }}"
          organization-id: "f90532fc-e58c-4863-bc0d-72623720335f"
          project-slug: "Millennium"
          signing-policy-slug: "release-signing"
          artifact-configuration-slug: "millennium-release-config"
          github-artifact-id: "${{ steps.upload-unsigned-artifact.outputs.artifact-id }}"
          output-artifact-directory: "signed-millennium"
          wait-for-completion: true
          parameters: |
            version: ${{ toJson(needs.prepare.outputs.version) }}

      - name: üì§ Upload Signed Build Release
        if: ${{ inputs.release_artifacts == 'yes' }}
        id: upload-signed-artifact
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: signed-millennium-windows
          path: D:\a\Millennium\Millennium\signed-millennium

  build-linux:
    needs: prepare
    permissions:
      contents: write
      issues: write
      pull-requests: write

    runs-on: ubuntu-latest

    steps:
      - name: ‚öôÔ∏è Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: ‚öôÔ∏è Update Millennium Version
        run: |
          echo "# current version of millennium" > ./version
          echo "v${{ needs.prepare.outputs.version }}" >> ./version

      - name: ‚öôÔ∏è Install GCC Dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y build-essential gcc-multilib g++-multilib libc6-dev-i386 libgtk-3-dev ninja-build libpsl-dev:i386 libssl-dev:i386 pkg-config:i386

      - name: ‚öôÔ∏è Download Python Dependencies
        run: |
          curl -fsSL https://get.pnpm.io/install.sh | sh -

          wget https://github.com/shdwmtr/pybuilder/releases/download/v1.0.6/python-3.11.8-32-bit.tar.gz -O python-3.11.8-32-bit.tar.gz
          mkdir -p ~/build/opt/python-i686-3.11.8
          mkdir -p ~/build/usr/lib/millennium
          mkdir -p /opt/python-i686-3.11.8/lib

          tar -xzf python-3.11.8-32-bit.tar.gz -C ~/build/opt/python-i686-3.11.8
          mv ~/build/opt/python-i686-3.11.8/python-build/* ~/build/opt/python-i686-3.11.8/

          cp ~/build/opt/python-i686-3.11.8/lib/libpython-3.11.8.so /opt/python-i686-3.11.8/lib/libpython-3.11.8.so
          ~/build/opt/python-i686-3.11.8/bin/python3.11 --version

      - name: ‚öôÔ∏è Install CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.21.1"

      - name: üõ†Ô∏è Build Millennium Backend
        run: |
          export PKG_CONFIG_PATH="/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/pkgconfig"
          export CMAKE_LIBRARY_PATH="/usr/lib/i386-linux-gnu"
          export CMAKE_INCLUDE_PATH="/usr/include/i386-linux-gnu"
          export PKG_CONFIG_LIBDIR="/usr/lib/i386-linux-gnu/pkgconfig"

          cmake --preset=linux-release -G "Ninja" -DGITHUB_ACTION_BUILD=ON \
            -DCMAKE_LIBRARY_PATH="/usr/lib/i386-linux-gnu" \
            -DCMAKE_INCLUDE_PATH="/usr/include" \
            -DCMAKE_FIND_ROOT_PATH="/usr/lib/i386-linux-gnu" \
            -DCMAKE_PREFIX_PATH="/usr/lib/i386-linux-gnu" \
            -DCMAKE_SYSTEM_LIBRARY_PATH="/usr/lib/i386-linux-gnu" \
            -DPKG_CONFIG_EXECUTABLE="/usr/bin/pkg-config" \
            -DPKG_CONFIG_USE_CMAKE_PREFIX_PATH=ON
            
          # Build the project
          cmake --build build --config Release -- -j$(nproc)

          # Create final directory structure
          mkdir -p ~/build/usr/lib/millennium
          mkdir -p ~/build/usr/bin
          mkdir -p ~/build/usr/share/millennium
          mkdir -p ~/build/opt

          # Copy binaries and libraries directly to final locations
          cp ./build/libmillennium_x86.so ~/build/usr/lib/millennium/libmillennium_x86.so
          cp ./build/src/boot/linux/libmillennium_bootstrap_86x.so ~/build/usr/lib/millennium/libmillennium_bootstrap_86x.so

          # Copy frontend assets from downloaded artifacts
          find assets -mindepth 1 -maxdepth 1 \( -name '.millennium' -o -name 'pipx' \) -exec mv -t ~/build/usr/share/millennium/assets {} +

      - name: üì§ Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: millennium-linux
          path: ~/build/

  release:
    needs: [prepare, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: ${{ inputs.release_artifacts == 'yes' }}
    steps:
      - name: ‚öôÔ∏è Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: ‚öôÔ∏è Download Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: ‚öôÔ∏è Install Semantic Release
        run: npm install --save-dev semantic-release @semantic-release/github @semantic-release/exec @semantic-release/changelog @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Download Windows Build
        uses: actions/download-artifact@v4
        with:
          name: millennium-windows-signed
          path: ./artifacts/windows

      - name: ‚öôÔ∏è Download Linux Build
        uses: actions/download-artifact@v4
        with:
          name: millennium-linux
          path: ./artifacts/linux

      - name: ‚öôÔ∏è Update Millennium Version
        run: |
          echo "# current version of millennium" > ./version
          echo "v${{ needs.prepare.outputs.version }}" >> ./version

      - name: üõ†Ô∏è Release Millennium
        run: |
          mkdir -p ./artifacts/release
          cd ./artifacts/windows && zip -r ../release/millennium-v${{ needs.prepare.outputs.version }}-windows-x86_64.zip . && cd ../..
          tar -czvf ./artifacts/release/millennium-v${{ needs.prepare.outputs.version }}-linux-x86_64.tar.gz -C ./artifacts/linux .
          cd scripts && npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
